;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
;Author information
;  Author name: Justin Stewart
;  Author email: scubastew@csu.fullerton.edu
;  Author location: Long Beach, Calif.
;Course information
;  Course number: CPSC240
;  Assignment number: 1
;  Due date: 2015-Aug-25
;Project information
;  Project title: Compute the surface area of a sphere given its radius.
;  Purpose: 
;  Status:
;  Project files: spheredriver.c, spheremain.asm
;Module information
;  File name: spheremain.asm
;  This module's call name: sphere
;  Language: X86-64
;  Syntax: Intel
;  Date last modified: 
;  Purpose: 
;  Status: 
;  Future enhancements: 
;Translator information
;  Linux: nasm -f elf64 -l spheremain.lis -o spheremain.o spheremain.asm
;References and credits
;  
;Format information
;  Page width: 172 columns
;  Begin comments: 61
;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
;
;===== Begin area for source code =========================================================================================================================================

extern printf                                               ;This subprogram will be linked later

extern scanf						    ;This subprogram will be linked later
	
global sphere                                               ;Make this program callable by other programs.

segment .data                                               ;Initialized data are placed in this segment

;===== Declare some messages ==============================================================================================================================================

welcome db "Welcome to the spheres program. This program will compute the surface area and the volume of a sphere.", 10, 0

prompt db "Please enter the radius of the sphere: ", 0

farewell db "The main assembly program will now return the surface area to the driver. Enjoy your spheres.", 10, 0

;===== Declare formats for output =========================================================================================================================================

sphere.stringformat db "%s", 0

sphere.outputformat db "%1.18lf  %1.18lf  %1.18lf", 10, 0

;===== Declare formats for input ===========================================================================================================================================

sphere.inputformat db "%d", 0

radius dq 0						    ;Make memory space available for radius input from user.
	
segment .bss                                                ;Uninitialized data are declared in this segment

;==========================================================================================================================================================================
;===== Begin the application here: Test the performance of some instructions acting on the AVX component ==================================================================
;==========================================================================================================================================================================

segment .text                                               ;Instructions are placed in this segment

sphere:                                                    ;Execution of this program will begin here.

;The next two instructions must be performed at the start of every assembly program.
push       rbp                                              ;This marks the start of a new stack frame belonging to this execution of this function.
mov        rbp, rsp                                         ;rbp holds the address of the start of this new stack frame.  When this function returns to its caller rbp must
                                                            ;hold the same value it holds now.

;===== Output the welcome message =========================================================================================================================================
;At this point there are no data in any register of value to this program.  Therefore, printf will be called without backing up any data.

mov qword rdi, .stringformat                                ;"%s"
mov qword rsi, welcome                                      ;"Welcome to the spheres program. This program will compute the surface area and the volume of a sphere."
mov qword rax, 0                                            ;Zero in rax indicates printf receives no data from vector registers (AVX or SSE).
call      printf                                            ;An external function handles output.

;===== Output the prompt to the user ==============================================================================================================================

mov qword rdi, .stringformat                                ;"%s"
mov qword rsi, prompt                                       ;"Please enter the radius of the sphere: "
mov qword rax, 0                                            ;Zero in rax indicates printf receives no data from vector registers
call      printf                                            ;An external function handles output.

;===== Retrieve radius of sphere fromthe user ==============================================================================================================================

mov qword rdi, .inputformat				    ;"%d"
mov qword rsi, radius					    ;Retrieve radius input from user
mov qword rax, 1					    ;Zero in rax indicates scanf receives no data from vector registers
call 	  scanf						    ;An external function handles input.

mov r15, radius
add r15, 10
mov radius, r15
mov qword rax, 0
mov qword rsi, radius
call printf
;===== Say good-bye =======================================================================================================================================================
;We are almost at the end of the program.  Again there are no data in registers worth saving.  There is one data value on top of the stack that will be needed soon.

mov qword rdi, .stringformat                                ;A little good-bye message will be outputted.
mov qword rsi, farewell                                     ;"I hope you enjoyed using my program"
mov qword rax, 0                                            ;Zero says that no data values from SSE registers are used by printf
call printf

;=========== Set the value to be returned to the caller ===================================================================================================================
;Presently the value to be returned to the caller is on the top of the system stack.  That value needs to be copied to xmm0 and removed from the stack.

pop        rax                                              ;Remove the return value from the stack.

pop        rbp                                              ;Restore the value rbp held when this function began execution.

;Now the stack is in the same state as when the application area was entered.  It is safe to leave this application area.

;==========================================================================================================================================================================
;===== End of the application: Test for the presence of AVX ===============================================================================================================
;==========================================================================================================================================================================

ret                                                         ;Pop an 8-byte integer from the system stack, place a copy in rip, resume execution at the address in rip.
;===== End of program avxdemo ==============================================================================================================================================
;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**

